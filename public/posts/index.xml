<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Forward Error Correction blog</title>
    <link>http://localhost:1313/blog/posts/</link>
    <description>Recent content in Posts on Forward Error Correction blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2024 06:40:42 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Final /blog post: project overview and conclusions</title>
      <link>http://localhost:1313/blog/posts/final/</link>
      <pubDate>Thu, 29 Aug 2024 06:40:42 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/final/</guid>
      <description>I worked on a Forward Error Correction (FEC) project in GNU Radio for Google Summer of Code 2024. I started the project at the end of May, and I&amp;rsquo;m wrapping up now, at the beginning of September. Throughout the project, I&amp;rsquo;ve made /blog posts describing my progress (see the homepage of this website), though I did not post updates for the last couple of weeks, August 19-30 &amp;ndash; apologies.&#xA;I would like to thank my mentors, noc0lour and Daniel Est√©vez, for their help on the project this summer.</description>
    </item>
    <item>
      <title>Week 10: August 12-16</title>
      <link>http://localhost:1313/blog/posts/week10/</link>
      <pubDate>Tue, 20 Aug 2024 08:45:36 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week10/</guid>
      <description>Last week, I worked on comparing the testbench results to AFF3CT&amp;rsquo;s simulation and adding new codecs into the OOT module.&#xA;I implemented the polar codec with hard-coded values to get it up and running. Now, I need to go back and adjust the code so a user can configure the simulation to their preferences. I also started adding the turbo product code (TPC) codec but encountered errors along the way and have more work to do with it.</description>
    </item>
    <item>
      <title>Week 9: August 5-9</title>
      <link>http://localhost:1313/blog/posts/week9/</link>
      <pubDate>Mon, 12 Aug 2024 08:42:25 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week9/</guid>
      <description>Last week, I continued developing the testbench. I restructured how I counted frame errors for clarity and fixed the calculation of sigma, the standard deviation of noise, for Es/N0 (energy per signal over noise). Now the simulation matches the AFF3CT results more closely by visual inspection. However, I still need to plot the BER and FER curves to compare my use of AFF3CT through GNU Radio blocks with the AFF3CT simulation itself.</description>
    </item>
    <item>
      <title>Week 8: July 29 - August 2</title>
      <link>http://localhost:1313/blog/posts/week8/</link>
      <pubDate>Mon, 05 Aug 2024 12:53:50 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week8/</guid>
      <description>Last week, I made progress on the testbench. I created a Python file that simulates a communication chain. The user configures the codec scheme, signal-to-noise ratio range, and message size parameters through command-line arguments. For each Eb/N0 SNR value, a loop counts the number of bit and frame errors and re-runs the flowgraph until the frame errors reaches 100 (or a different, user-specified value). Each iteration, a new random-data message is created and encoded, noisy data is added, and the data is decoded.</description>
    </item>
    <item>
      <title>Week 7: July 15-19</title>
      <link>http://localhost:1313/blog/posts/week7/</link>
      <pubDate>Fri, 19 Jul 2024 16:27:05 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week7/</guid>
      <description>This week, I added the Repeat and Accumulate (RA) codec and worked on the Reed-Solomon (RS) codec. RA codes are fairly simple, and I did not have much trouble. However, I still need to add QA codes for them and check some additional input.&#xA;RS codes are a subtype of BCH codes. I still had trouble with the BCH codes this week, and I could not get the RS codes to work at all.</description>
    </item>
    <item>
      <title>Week 6: July 8-12</title>
      <link>http://localhost:1313/blog/posts/week6/</link>
      <pubDate>Mon, 15 Jul 2024 07:09:07 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week6/</guid>
      <description>Last week, I continued developing the Turbo codec. I added the CCSDS configuration, which runs correctly, though it still needs some work. The CCSDS implementation requires one of a few specific frame sizes (1784, 3568, 7136, or 8920 bits). Currently, my workaround pads with zeros and transmits the full corresponding codeword, which is not efficient. If CCSDS is a systematic code, I could transmit without the extra zeros and add them back before decoding.</description>
    </item>
    <item>
      <title>Week 5: June 24-28</title>
      <link>http://localhost:1313/blog/posts/week5/</link>
      <pubDate>Mon, 08 Jul 2024 09:02:33 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week5/</guid>
      <description>This update is for my progress two weeks ago, June 24-28. Last week, I took a vacation and did not work on the project.&#xA;Turbo codec The Turbo encoder and decoder blocks now work! In the previous code, I had a typo in the default argument for the polynomials parameter of the encoder, so the encoded and decoded implementation did not match. The quantizer for the decoder also had a misconfigured parameter.</description>
    </item>
    <item>
      <title>Week 4: June 17-21</title>
      <link>http://localhost:1313/blog/posts/week4/</link>
      <pubDate>Mon, 24 Jun 2024 10:13:12 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week4/</guid>
      <description>Continued progress on AFF3CT Turbo codec implementation in OOT module Last week, I continued to work on implementing the Turbo encoder and decoder blocks in GNU Radio. The blocks call the AFF3CT library to encode/decode the input vector, but the encoder block&amp;rsquo;s output is not right.&#xA;I started using the debugger in VS Code to step through the code. This was helpful as I was dealing with segmentation faults and needed to track down where the code was accessing invalid memory (with the help of my mentors).</description>
    </item>
    <item>
      <title>Week 3: June 10-14</title>
      <link>http://localhost:1313/blog/posts/week3/</link>
      <pubDate>Mon, 17 Jun 2024 10:13:16 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week3/</guid>
      <description>Later after reading my week 2 blog post, I realized I incorrectly said that my week 2 goal was to implement the next 3 codecs. (While I was writing my proposal, I had written that as my week 2 goal in one draft.) My week 2 goal was actually to test the turbo parallel block, write QA codes, and document the new blocks. Adding, testing, and documenting the BCH, RS, and RA codecs was the Weeks 3-4 (June 10-21) goal.</description>
    </item>
    <item>
      <title>Week 2: June 3-7</title>
      <link>http://localhost:1313/blog/posts/week2/</link>
      <pubDate>Fri, 07 Jun 2024 10:01:02 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week2/</guid>
      <description>At the end of the first two weeks, I am unfortunately behind schedule. Setting up the development environment so that I can work in-tree has required troubleshooting every step of the way. Based on my issues, I plan to update the MacOS installation guide on the wiki in the next few weeks, or at least point out some outdated instructions.&#xA;I&amp;rsquo;ve decided to start working on new blocks in an OOT module called fec_dev before moving my code over to the main tree.</description>
    </item>
    <item>
      <title>Week 1: May 28-31</title>
      <link>http://localhost:1313/blog/posts/week1/</link>
      <pubDate>Tue, 28 May 2024 15:10:24 -0400</pubDate>
      <guid>http://localhost:1313/blog/posts/week1/</guid>
      <description>This summer, I am contributing to GNU Radio through Google Summer of Code. I recently completed my Bachelor&amp;rsquo;s degree in Electrical Engineering, and I&amp;rsquo;m starting a PhD program in Networks/Communications in the fall. My project involves overhauling GNU Radio&amp;rsquo;s forward error correction (FEC) / error coding package (gr-fec).&#xA;Other open source libraries like AFF3CT (https://aff3ct.github.io/) include additional FEC implementations compared to GNU Radio. I will add FEC techniques from AFF3CT&amp;rsquo;s library into GNU Radio and develop a testbench to compare throughput and error rate for different techniques and implementations.</description>
    </item>
  </channel>
</rss>
